import json
import matplotlib.pyplot as plt
import numpy as np
from io import BytesIO
import base64
from typing import Dict, Any

def render_chart_to_html(data_json: str, title: str = "Financial Analysis") -> str:
    """
    Generate matplotlib chart from JSON data and render to styled HTML.
    
    Args:
        data_json: JSON string containing chart specifications
        title: Title for the chart container
        
    Returns:
        HTML string with embedded chart and styling
    """
    try:
        # Parse the JSON data
        data = json.loads(data_json) if isinstance(data_json, str) else data_json
        
        chart_type = data.get("chart_type", "line_projection")
        chart_title = data.get("title", title)
        chart_data = data.get("data", {})
        styling = data.get("styling", {})
        
        # Create matplotlib chart based on type
        plt.figure(figsize=(12, 8))
        
        if chart_type == "line_projection":
            _create_projection_chart(chart_data, styling)
        elif chart_type == "spending_pie":
            _create_pie_chart(chart_data, styling)
        elif chart_type == "comparison_bar":
            _create_comparison_chart(chart_data, styling)
        elif chart_type == "savings_opportunities":
            _create_savings_chart(chart_data, styling)
        else:
            # Default to simple line chart
            _create_projection_chart(chart_data, styling)
        
        plt.title(chart_title, fontsize=18, fontweight='bold', pad=20)
        
        # Save plot to base64 string
        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight', 
                   facecolor='white', edgecolor='none')
        buffer.seek(0)
        image_base64 = base64.b64encode(buffer.getvalue()).decode()
        plt.close()  # Clean up
        
        # Generate HTML with styling
        html_content = f'''
        <div class="graph-container" id="graph">
            <style>
                .graph-container {{
                    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
                    border-radius: 15px;
                    padding: 25px;
                    margin: 20px auto;
                    box-shadow: 0 10px 40px rgba(0,0,0,0.1);
                    max-width: 1000px;
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                }}
                
                .chart-title {{
                    font-size: 28px;
                    font-weight: bold;
                    color: #2c3e50;
                    text-align: center;
                    margin-bottom: 20px;
                    text-shadow: 1px 1px 2px rgba(0,0,0,0.1);
                }}
                
                .chart-image {{
                    width: 100%;
                    height: auto;
                    border-radius: 10px;
                    box-shadow: 0 5px 20px rgba(0,0,0,0.15);
                }}
                
                .chart-footer {{
                    text-align: center;
                    margin-top: 15px;
                    font-size: 12px;
                    color: #7f8c8d;
                    font-style: italic;
                }}
                
                @media (max-width: 768px) {{
                    .graph-container {{
                        padding: 15px;
                        margin: 10px;
                    }}
                    .chart-title {{
                        font-size: 22px;
                    }}
                }}
            </style>
            
            <div class="chart-title">{chart_title}</div>
            <img src="data:image/png;base64,{image_base64}" alt="Financial Chart" class="chart-image">
            <div class="chart-footer">Generated by Financial Visualization Agent</div>
        </div>
        '''
        
        return html_content
        
    except Exception as e:
        # Return error message in styled container
        return f'''
        <div class="graph-container" id="graph">
            <style>
                .graph-container {{
                    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
                    border-radius: 15px;
                    padding: 25px;
                    margin: 20px auto;
                    box-shadow: 0 10px 40px rgba(0,0,0,0.1);
                    max-width: 800px;
                    color: white;
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                }}
                .error-title {{
                    font-size: 24px;
                    font-weight: bold;
                    margin-bottom: 15px;
                    text-align: center;
                }}
                .error-message {{
                    font-size: 16px;
                    text-align: center;
                }}
            </style>
            <div class="error-title">Chart Generation Error</div>
            <div class="error-message">Unable to generate chart: {str(e)}</div>
        </div>
        '''

def _create_projection_chart(data: Dict[str, Any], styling: Dict[str, Any]) -> None:
    """Create a projection/growth line chart."""
    starting_amount = data.get("starting_amount", 0)
    monthly_investment = data.get("monthly_investment", 0)
    interest_rate = data.get("interest_rate", 0) / 100 / 12  # Monthly rate
    timeline_months = data.get("timeline_months", 12)
    
    # Generate projection data
    months = np.arange(0, timeline_months + 1)
    amounts = []
    current = starting_amount
    
    for month in months:
        if month == 0:
            amounts.append(current)
        else:
            current = current * (1 + interest_rate) + monthly_investment
            amounts.append(current)
    
    # Plot the line
    line_color = styling.get("line_color", "#2E8B57")
    plt.plot(months, amounts, linewidth=3, color=line_color, marker='o', 
             markersize=6, markevery=max(1, len(months)//10))
    
    if styling.get("fill_area", True):
        plt.fill_between(months, amounts, alpha=0.3, color=line_color)
    
    if styling.get("target_line", True) and "final_amount" in data:
        target = data["final_amount"]
        plt.axhline(y=target, color='#FF6B6B', linestyle='--', linewidth=2, 
                   label=f'Target: ${target:,.0f}')
        plt.legend(fontsize=12)
    
    plt.xlabel(styling.get("x_label", "Months"), fontsize=14)
    plt.ylabel(styling.get("y_label", "Amount ($)"), fontsize=14)
    plt.grid(True, alpha=0.3)
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.0f}'))

def _create_pie_chart(data: Dict[str, Any], styling: Dict[str, Any]) -> None:
    """Create a pie chart for spending categories."""
    categories = data.get("categories", {})
    
    labels = []
    amounts = []
    for category, amount in categories.items():
        if isinstance(amount, dict):
            amount = amount.get("actual", amount.get("amount", 0))
        labels.append(category.replace('_', ' ').title())
        amounts.append(float(amount))
    
    # Create color palette
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F']
    colors = colors[:len(labels)]
    
    # Create pie chart
    wedges, texts, autotexts = plt.pie(amounts, labels=labels, colors=colors, 
                                      autopct='%1.1f%%', startangle=90, 
                                      explode=[0.05]*len(labels))
    
    # Enhance text appearance
    for text in texts:
        text.set_fontsize(12)
        text.set_fontweight('bold')
    
    for autotext in autotexts:
        autotext.set_color('white')
        autotext.set_fontsize(11)
        autotext.set_fontweight('bold')
    
    plt.axis('equal')
    
    # Add total annotation
    total = sum(amounts)
    plt.figtext(0.5, 0.02, f'Total: ${total:,.2f}', 
               ha='center', fontsize=14, fontweight='bold')

def _create_comparison_chart(data: Dict[str, Any], styling: Dict[str, Any]) -> None:
    """Create a comparison bar chart."""
    categories = list(data.keys())
    values = [float(data[cat]) for cat in categories]
    
    colors = styling.get("colors", ['#E74C3C', '#27AE60', '#3498DB', '#F39C12'])
    colors = colors[:len(categories)]
    
    bars = plt.bar(categories, values, color=colors, alpha=0.8)
    
    # Add value labels on bars
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + height*0.01,
                f'${height:,.0f}', ha='center', va='bottom', fontweight='bold')
    
    plt.xlabel(styling.get("x_label", "Categories"), fontsize=14)
    plt.ylabel(styling.get("y_label", "Amount ($)"), fontsize=14)
    plt.xticks(rotation=45, ha='right')
    plt.grid(True, alpha=0.3, axis='y')
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.0f}'))

def _create_savings_chart(data: Dict[str, Any], styling: Dict[str, Any]) -> None:
    """Create a savings opportunities bar chart."""
    opportunities = data.get("opportunities", data)
    
    labels = [cat.replace('_', ' ').title() for cat in opportunities.keys()]
    amounts = [float(val) for val in opportunities.values()]
    
    colors = ['#27AE60', '#E74C3C', '#3498DB', '#F39C12', '#9B59B6'][:len(labels)]
    bars = plt.bar(labels, amounts, color=colors)
    
    # Add value labels
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height + height*0.01,
                f'${height:,.0f}', ha='center', va='bottom', fontweight='bold')
    
    plt.xlabel("Categories", fontsize=14)
    plt.ylabel("Potential Savings ($)", fontsize=14)
    plt.xticks(rotation=45, ha='right')
    plt.grid(True, alpha=0.3, axis='y')
    
    # Add total savings annotation
    total_savings = sum(amounts)
    plt.figtext(0.5, 0.02, f'Total Potential Savings: ${total_savings:,.2f}', 
               ha='center', fontsize=14, fontweight='bold',
               bbox=dict(boxstyle="round,pad=0.3", facecolor="#27AE60", alpha=0.8))
    
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.0f}'))